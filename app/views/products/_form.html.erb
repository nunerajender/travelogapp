<%= form_for(@product) do |f| %>
	<div class="form-group  col-md-12 ">
		<%= f.label :name, 'Name:' %><br />
		<%= f.text_field :name, autofocus: true, :class => 'form-control' %>
	</div>

	<div class="form-group col-md-12 ">
		<%= f.label :product_category_id, 'Product Category:' %>
		<%= f.select(:product_category_id, ProductCategory.all.collect {|p| [ p.name, p.id ] }, {include_blank: false} , :class => 'form-control') %>
	</div>

	<div class="form-group col-md-12 ">
		<%= f.label :country, 'Country:' %>
		<%= f.select(:country, get_country_list.collect {|p| [ p[:country], p[:country] ] }, {include_blank: false} , :class => 'form-control') %>
	</div>

	<div class="form-group  col-md-12 ">
		<%= f.label :address, 'Street Address:', :placeholder => 'House name/number + street/road' %><br />
		<%= f.text_field :address, :class => 'form-control', :autocomplete => 'off'%>
	</div>

	<div class="form-group  col-md-12 ">
		<%= f.label :apt, 'Apt, Suite, Bldg. (optional)' %><br />
		<%= f.text_field :apt, :class => 'form-control', :placeholder => 'Apt., suite, building access code', :id => 'route'%>
	</div>

	<div class="form-group  col-md-12 ">
		<%= f.label :city, 'City:' %><br />
		<%= f.text_field :city, :class => 'form-control', :placeholder => 'City', :id => 'locality'%>
	</div>

	<div class="form-group  col-md-12 ">
		<%= f.label :state, 'State:' %><br />
		<%= f.text_field :state, :class => 'form-control', :placeholder => 'State', :id => 'administrative_area_level_1'%>
	</div>

	<div class="form-group  col-md-12 ">
		<%= f.label :zip, 'Zip:' %><br />
		<%= f.text_field :zip, :class => 'form-control', :id => 'postal_code'%>
	</div>

	<div class="col-md-12 form-group">
		<h1>Set a nightly price for your space</h1>
		<p>
			You can see a price to reflect the space, amenities, and hospitality you'll be providing.
		</p>
		<hr/>
		<label>Base price</label>
		<div class="amount-inner">
			<div class="input-group clearfix">
				<span class="input-group-addon currency-value">$</span>
				<input name="product[price_cents]" type="text" value="<%= @product.price_cents / 100 if @product.price_cents.present? %>">
			</div>
		</div>
		<%= f.label :currency, 'Currency' %>
		<%= f.select(:currency, get_currency_list.collect {|p| [ p[:currency], p[:currency] ] }, {include_blank: false} , :class => 'form-control') %>
	</div>

	<div class="form-group col-md-12 ">
		<button type="button" id="add-photo-button" class="btn btn-default btn-lg active">Add Photo</button>
	</div>

	<div class="attachments-container">
		<input name="file_attachment" type="file" id="file_upload">
		<% if !@product.new_record? %>
			<% @product.product_attachments.each do |attachment| %>
				<div class="form-group col-md-4">
					<img src="<%= attachment.attachment.small.url %>">
					<input type="hidden" name="product_attachment[id][]" value="<%= attachment.id %>">
					<button type="button" class="btn btn-default delete-attachment">Delete</button>
				</div>
			<% end %>
		<% end %>
		
	</div>

	<div class="form-group col-md-12 ">
		<div class="radio">
		  <label>
		  	<% if @product.new_record? %>
		    	<%= f.radio_button :payment_type, "visa", checked: true %>
		    <% else %>
		    	<%= f.radio_button :payment_type, "visa", checked: @product.payment_type == 'visa' %>
		    <% end %>
		    Visa
		  </label>
		</div>
		<div class="radio">
		  <label>
		  	<%= f.radio_button :payment_type, "master", checked: @product.payment_type == 'master' %>
		    MasterCard
		  </label>
		</div>
		<div class="radio">
		  <label>
		  	<%= f.radio_button :payment_type, "american_express", checked: @product.payment_type == 'american_express' %>
		    American Express
		  </label>
		</div>
		<div class="radio">
		  <label>
		  	<%= f.radio_button :payment_type, "paypal", checked: @product.payment_type == 'paypal' %>
		    Paypal
		  </label>
		</div>
	</div>

	<div class="form-group col-md-12 ">
		<label>
			<input type="checkbox" id="chk-agree" value="option1"> Agree the terms
		</label>
	</div>

	<div class="form-group col-md-12 ">
		<%= f.submit 'Submit', :class => 'blue btn-block btn btn-primary' %>
	</div>
	
<% end %>

<script>
$(window).load(function() {
	$(document).ready(function() {
		var adjustProductAttachments = function() {
			$('.attachments-container .clearfix').remove();
			index = 0;
			$('.attachments-container .col-md-4').each(function() {
				index++;
				if (index % 3 == 0) {
					$(this).after('<div class="clearfix"></div>');
				};
			})
		}

		// $('select').selectpicker({
		// 	liveSearch: false,
		// 	maxOptions: 1
		// });
		$('input[type="submit"]').prop('disabled', !$('#chk-agree').prop('checked'));
		adjustProductAttachments();

		$(document).on('change', '#chk-agree', function() {
			$('input[type="submit"]').prop('disabled', !$('#chk-agree').prop('checked'))
		})

		$(document).on('click', '#add-photo-button', function() {
			attachment_count = $('.attachments-container .col-md-4').length
			if (attachment_count < 5) {
				$('#file_upload').trigger('click');
			} else {
				alert("Can't upload more than 5.");
			}
			
		})

		$('.attachments-container').on('change', '#file_upload', function() {
			var formData = new FormData();
			formData.append('product_attachment[attachment]', this.files[0]);
			$.ajax({
			  url: '/product_attachments',
			  dataType: "json",
			  data: formData,
			  cache: false,
			  contentType: false,
			  processData: false,
			  type: 'POST',
			  success: function(data) {
			  	console.log('success');
			  	append_html = '<div class="form-group col-md-4">';
			  	append_html += '<img src="' + data.attachment.small.url + '" data-id="' + data.id + '">';
			  	append_html += '<input type="hidden" name="product_attachment[id][]" value="' + data.id + '">';
			  	append_html += '<button type="button" class="btn btn-default delete-attachment">Delete</button>';
			  	append_html += '</div>';
			  	$('.attachments-container').append(append_html);
			  	$('#file_upload').val('');
			  	adjustProductAttachments();
			  },
			  error: function(error) {
	      	console.log(error);
	      }
			});
		})

		$('.attachments-container').on('click', '.delete-attachment', function(event) {
			$(this).parent().fadeOut('slow', function() {
				$(this).remove();
			});
			var attachment_id = $(this).parent().find('input[name="product_attachment[id][]"]').val();
			$.ajax({
			  type: "POST",
        url: "/product_attachments/" + attachment_id,
        dataType: "json",
        data: { "_method": "delete" },
        complete: function(){
          console.log('deleted attachment');
        }
			});
			event.preventDefault();

		})


	});

});

$(function() {
	function displayResult(item) {
		$('.alert').show().html('You selected <strong>' + item.value + '</strong>: <strong>' + item.text + '</strong>');
	}
	$('#demo6').typeahead({
		source: [
			'Genting',
			'Zoo Negara',
			'Tioman',
			'Petronas Towers',
			'Batu Caves',
			'Gunung Mulu',
			'Mount Kinabalu',
			'Bako Park',
			'Sunway Lagoon',
			'Pangkor island'
		],
		onSelect: displayResult
	});

});

// This example displays an address form, using the autocomplete feature
// of the Google Places API to help users fill in the information.

var placeSearch, autocomplete;
var componentForm = {
  // street: 'short_name',
  route: 'long_name',
  locality: 'long_name',
  administrative_area_level_1: 'short_name',
  // country: 'long_name',
  postal_code: 'short_name'
};

function initAutocomplete() {
  // Create the autocomplete object, restricting the search to geographical
  // location types.
  autocomplete = new google.maps.places.Autocomplete(
      /** @type {!HTMLInputElement} */(document.getElementById('product_address')),
      {types: ['geocode']});

  // When the user selects an address from the dropdown, populate the address
  // fields in the form.
  autocomplete.addListener('place_changed', fillInAddress);
}

// [START region_fillform]
function fillInAddress() {
  // // Get the place details from the autocomplete object.
  var place = autocomplete.getPlace();

  for (var component in componentForm) {
    document.getElementById(component).value = '';
    document.getElementById(component).disabled = false;
  }

  // // Get each component of the address from the place details
  // // and fill the corresponding field on the form.
  for (var i = 0; i < place.address_components.length; i++) {
    var addressType = place.address_components[i].types[0];
    if (componentForm[addressType]) {
      var val = place.address_components[i][componentForm[addressType]];
      document.getElementById(addressType).value = val;
    }
  }
}
// [END region_fillform]

// [START region_geolocation]
// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      var geolocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      };
      var circle = new google.maps.Circle({
        center: geolocation,
        radius: position.coords.accuracy
      });
      autocomplete.setBounds(circle.getBounds());
    });
  }
}
// [END region_geolocation]
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCK70SDLsZG5fYn8kLfMj1I7Dy2zXoq6Qk&signed_in=true&libraries=places&callback=initAutocomplete" async defer>
	
</script>

<style type="text/css">
	input[type=file] {
		display: none;
	}
	.section-details .btn.delete-attachment {
		position: absolute;
    top: 0;
    right: 15px;
    height: inherit;
    padding: 2px 10px;
    border-radius: 0;
    opacity: 0.8;
    background-color: #ccc;
	}
	.attachments-container .form-group.col-md-4 {
		position: relative;
	}

	.attachments-container img {
		width: 100%
	}

	.form-control {
		border: 1px solid #ccc;
	}
	.amount-inner .input-group {
		display: table-row;
		line-height: 44px;
	}
	.amount-inner span.input-group-addon.currency-value {
		font-size: 1.8rem;
    padding: 1rem;
    background: none repeat scroll 0 0 #f1f2f2;
    display: table-cell;
	}
	.amount-inner .input-group input {
		margin: 0;
    display: table-cell;
	}
</style>