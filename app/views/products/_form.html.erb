<%= render 'shared/store_setting_errors', :obj => @product %>
<%= form_for(@product) do |f| %>
	<div class="form-group row">
		<%= f.label :name, 'Name:', :class => 'col-xs-12 control-label' %>
    <div class="col-xs-12">
    	<%= f.text_field :name, autofocus: true, :class => 'form-control' %>
    </div>
	</div>

	<div class="form-group row">
		<%= f.label :product_category_id, 'Product Category:', :class => 'col-xs-12' %>
		<div class="col-xs-12">
			<%= f.select(:product_category_id, ProductCategory.order('id ASC').collect {|p| [ p.name, p.id ] }, {include_blank: false} , :class => 'form-control') %>
		</div>
	</div>

	<div class="form-group row">
		<%= f.label :country, 'Country:', :class => 'col-xs-12' %>
		<div class="col-xs-12">
			<%= f.select(:country, get_country_list.collect {|p| [ p[:country], p[:country] ] }, {include_blank: false} , :class => 'form-control') %>
		</div>
	</div>

	<div class="form-group row">
		<%= f.label :address, 'Street Address:', :placeholder => 'House name/number + street/road', :class => 'col-xs-12' %>
		<div class="col-xs-12">
			<%= f.text_field :address, :class => 'form-control', :autocomplete => 'off', :id => 'route' %>
		</div>
	</div>

	<div class="form-group row">
		<%= f.label :apt, 'Apt, Suite, Bldg. (optional)', :class => 'col-xs-12' %>
		<div class="col-xs-12">
			<%= f.text_field :apt, :class => 'form-control', :placeholder => 'Apt., suite, building access code', :id => 'street_number'%>
		</div>
	</div>

	<div class="form-group row">
		<%= f.label :city, 'City:', :class => 'col-xs-12' %>
		<div class="col-xs-12">
			<%= f.text_field :city, :class => 'form-control', :placeholder => 'City', :id => 'locality'%>
		</div>
	</div>

	<div class="form-group row">
		<%= f.label :state, 'State:', :class => 'col-xs-12' %>
		<div class="col-xs-12">
			<%= f.text_field :state, :class => 'form-control', :placeholder => 'State', :id => 'administrative_area_level_1' %>
		</div>
	</div>

	<div class="form-group row">
		<%= f.label :zip, 'Zip:', :class => 'col-xs-12' %>
		<div class="col-xs-12">
			<%= f.text_field :zip, :class => 'form-control', :id => 'postal_code'%>
		</div>
	</div>

	<div class="form-group row">
		<div class="col-xs-12">
			<h1>Set a nightly price for your space</h1>
			<p>
				You can see a price to reflect the space, amenities, and hospitality you'll be providing.
			</p>
			<hr/>
			<label>Base price</label>
		</div>
		<div class="col-xs-12">
			<div class="amount-inner">
				<div class="input-group clearfix">
					<span class="input-group-addon currency-value">$</span>
					<input name="product[price_cents]" type="text" value="<%= @product.price_cents / 100 if @product.price_cents.present? %>" 
						<%= "disabled" if @product.variants.present? && @product.variants.count > 0 %>>
				</div>
			</div>
		</div>
		<div class="col-xs-12">
			<%= f.label :currency, 'Currency' %>
			<%= f.select(:currency, get_currency_list.collect {|p| [ p[:currency], p[:currency] ] }, {include_blank: false} , :class => 'form-control') %>
		</div>
	</div>

	<div class="form-group row">
		<%= f.label :description, 'Description:', :class => 'col-xs-12' %><br />
		<div class="col-xs-12">
			<%= f.text_area :description, :class => 'form-control' %>
		</div>
	</div>

	<div class="form-group row">
		<%= f.label :highlight, 'Highlight:', :class => 'col-xs-12' %><br />
		<div class="col-xs-12">
			<%= f.text_area :highlight, :class => 'form-control' %>
		</div>
	</div>

	<div class="form-group row">
		<div class="col-xs-12">
			<label>
				<%= f.check_box :refundable, checked: @product.refundable == 1 %>
				Refundable
			</label>
		</div>
	</div>

	<div class="form-group refund-area row">
		<%= f.label :refund_day, 'Refund Day:', :class => 'col-xs-12' %><br />
		<div class="col-xs-12">
			<%= f.text_field :refund_day, :class => 'form-control', :placeholder => 'Refund Day' %>
		</div>
	</div>

	<div class="form-group refund-area row">
		<%= f.label :refund_percent, 'Refund Percent:', :class => 'col-xs-12' %><br />
		<div class="col-xs-12">
			<%= f.text_field :refund_percent, :class => 'form-control', :placeholder => 'Refund Percent' %>
		</div>
	</div>

	<div class="form-group row">
		<div class="col-xs-12">
			<button type="button" id="add-variant-button" class="btn btn-default btn-sm active">Add Variant</button>
		</div>
	</div>
	<div class="variants-container form-group col-xs-12">
		<div class="form-group row hide" id="variantTemplate">
			<div class="col-xs-8">
				<div class="col-xs-12">
					<label for="variant_name">Variant Name:</label><br>
					<input class="form-control" type="text" name="variant[][name]" id="variant_name">
				</div>
				<div class="col-xs-12">
					<label for="variant_price">Variant Price:</label><br>
					<input class="form-control" type="text" name="variant[][price_cents]" id="variant_price">
				</div>
				
			</div>
			<div class="col-xs-4">
				<button type="button" class="btn btn-default removeButton"><i class="fa fa-minus"></i></button>
			</div>
			
		</div>
		<% if !@product.new_record? %>
			<% @product.variants.each do |variant| %>
				<div class="form-group row">
					<div class="col-xs-8">
						<div class="col-xs-12">
							<label for="variant_name">Variant Name:</label><br>
							<input class="form-control" type="text" value="<%= variant.name %>" name="variant[][name]" id="variant_name">
						</div>
						<div class="col-xs-12">
							<label for="variant_price">Variant Price:</label><br>
							<input class="form-control" type="text" value="<%= variant.price_cents / 100 %>" name="variant[][price_cents]" id="variant_price">
						</div>
					</div>
					<div class="col-xs-4">
						<button type="button" class="btn btn-default removeButton"><i class="fa fa-minus"></i></button>
					</div>
				</div>

			<% end %>
		<% end %>
	</div>

	<div class="form-group row">
		<div class="col-xs-12">
			<button type="button" id="add-photo-button" class="btn btn-default btn-sm active">Add Photo</button>
		</div>
	</div>

	<div class="attachments-container">
		<input name="file_attachment" type="file" id="file_upload">
		<% if !@product.new_record? %>
			<% @product.product_attachments.each do |attachment| %>
				<div class="form-group col-md-4">
					<img src="<%= attachment.attachment.small.url %>">
					<input type="hidden" name="product_attachment[id][]" value="<%= attachment.id %>">
					<button type="button" class="btn btn-default delete-attachment">Delete</button>
				</div>
			<% end %>
		<% end %>
		
	</div>

	<div class="form-group row">
		<div class="col-xs-12">
			<%= f.submit 'Submit', :class => 'blue btn-block btn btn-primary' %>
		</div>
	</div>
	
<% end %>

<script>
$(window).load(function() {
	$(document).ready(function() {

		$('body').loading({
		  stoppable: true
		});

		var adjustProductAttachments = function() {
			$('.attachments-container .clearfix').remove();
			index = 0;
			$('.attachments-container .col-md-4').each(function() {
				index++;
				if (index % 3 == 0) {
					$(this).after('<div class="clearfix"></div>');
				};
			})
		}

		var updateCurrencySymbol = function() {
			switch($('#product_currency').val()) {
				case 'USD':
					$('.amount-inner .currency-value').text('$');
					break;
				case 'MYR':
					$('.amount-inner .currency-value').text('RM');
					break;
				case 'SGD':
					$('.amount-inner .currency-value').text('$');
					break;
				case 'THB':
					$('.amount-inner .currency-value').text('à¸¿');
					break;
				case 'PHP':
					$('.amount-inner .currency-value').text('$');
					break;
				case 'TWD':
					$('.amount-inner .currency-value').text('NT$');
					break;
			}
		}

		var showRefundableFields = function() {

			$option_refund_day   = $('form').find('[name="product[refund_day]"]');
	    $option_refund_percent   = $('form').find('[name="product[refund_percent]"]');

			if ($('#product_refundable').prop('checked')) {
				$('.refund-area').css('display', 'block');
				
	      $('form').formValidation('revalidateField', 'product[refund_day]');
				$('form').formValidation('revalidateField', 'product[refund_percent]');
			} else {

				$('form').formValidation('revalidateField', 'product[refund_day]');
				$('form').formValidation('revalidateField', 'product[refund_percent]');
				
				$('.refund-area').css('display', 'none');
				
			}
		}

		$('#product_description').froalaEditor()
		.on('froalaEditor.contentChanged', function() {
      $('form').formValidation('revalidateField', 'product[description]');
    });

		$('#product_highlight').froalaEditor()
		.on('froalaEditor.contentChanged', function() {
      $('form').formValidation('revalidateField', 'product[highlight]');
    });

		$('textarea').css({'display': 'block', 'opacity': '0', 'height': '0px'});

		// $('select').selectpicker({
		// 	liveSearch: false,
		// 	maxOptions: 1
		// });
		adjustProductAttachments();
		// showRefundableFields();
		updateCurrencySymbol();

		$(document).on('change', '#product_refundable', function() {
			showRefundableFields();
		})

		
		$(document).on('click', '#add-photo-button', function() {
			attachment_count = $('.attachments-container .col-md-4').length
			if (attachment_count < 5) {
				$('#file_upload').trigger('click');
			} else {
				alert("Can't upload more than 5.");
			}
			
		})

		$('.attachments-container').on('change', '#file_upload', function() {
			$('body').loading({});
			var formData = new FormData();
			formData.append('product_attachment[attachment]', this.files[0]);
			$.ajax({
			  url: '/product_attachments',
			  dataType: "json",
			  data: formData,
			  cache: false,
			  contentType: false,
			  processData: false,
			  type: 'POST',
			  success: function(data) {
			  	console.log('success');
			  	append_html = '<div class="form-group col-md-4">';
			  	append_html += '<img src="' + data.attachment.small.url + '" data-id="' + data.id + '">';
			  	append_html += '<input type="hidden" name="product_attachment[id][]" value="' + data.id + '">';
			  	append_html += '<button type="button" class="btn btn-default delete-attachment">Delete</button>';
			  	append_html += '</div>';
			  	$('.attachments-container').append(append_html);
			  	$('#file_upload').val('');
			  	adjustProductAttachments();
			  	$('body').loading('stop');
			  },
			  error: function(error) {
	      	console.log(error);
	      	$('body').loading('stop');
	      },
	      timeout: 100000
			});
		})

		$('.attachments-container').on('click', '.delete-attachment', function(event) {
			$(this).parent().fadeOut('slow', function() {
				$(this).remove();
			});
			var attachment_id = $(this).parent().find('input[name="product_attachment[id][]"]').val();
			$.ajax({
			  type: "POST",
        url: "/product_attachments/" + attachment_id,
        dataType: "json",
        data: { "_method": "delete" },
        complete: function(){
          console.log('deleted attachment');
        }
			});
			event.preventDefault();

		})

		// change currency symbol
		$(document).on('change', '#product_currency', function() {
			updateCurrencySymbol();
		})

		$('form').formValidation({
			framework: 'bootstrap',
			icon: {
				valid: 'glyphicon glyphicon-ok',
				invalid: 'glyphicon glyphicon-remove',
				validating: 'glyphicon glyphicon-refresh'
			},
			fields: {
				'product[name]': {
					row: '.col-xs-12',
					validators: {
						notEmpty: {
							message: 'The product name is required'
						}
					}
				},
				'product[city]': {
					row: '.col-xs-12',
					validators: {
						notEmpty: {
							message: 'The city is required'
						}
					}
				},
				'product[state]': {
					row: '.col-xs-12',
					validators: {
						notEmpty: {
							message: 'The state is required'
						}
					}
				},
				'product[description]': {
					row: '.col-xs-12',
					validators: {
						callback: {
              message: 'The description is required and cannot be empty',
              callback: function(value, validator, $field) {
                var code = $('[name="product[description]"]').val();
                // <p><br></p> is code generated by Summernote for empty content
                return (code !== '' && code !== '<p><br></p>');
              }
            }
					}
				},
				'product[highlight]': {
					row: '.col-xs-12',
					validators: {
						callback: {
              message: 'The highlight is required and cannot be empty',
              callback: function(value, validator, $field) {
                var code = $('[name="product[highlight]"]').val();
                // <p><br></p> is code generated by Summernote for empty content
                return (code !== '' && code !== '<p><br></p>');
              }
            }
					}
				},
				'product[refund_day]': {
					row: '.col-xs-12',
					validators: {
						callback: {
							message: 'The refund day is required',
							callback: function(value, validator, $field) {
								var code = $('[name="product[refund_day]"]').val();
								return (!$('#product_refundable').prop('checked') || code !== '')
							}
						}
					}
				},
				'product[refund_percent]': {
					row: '.col-xs-12',
					validators: {
						callback: {
							message: 'The refund day is required',
							callback: function(value, validator, $field) {
								var code = $('[name="product[refund_percent]"]').val();
								return (!$('#product_refundable').prop('checked') || code !== '')
							}
						}
					}
				},
				'product[price_cents]': {
					row: '.col-xs-12',
					validators: {
						callback: {
							message: 'The base price is required',
							callback: function(value, validator, $field) {
								var code = $('[name="product[price_cents]"]').val();
								var variant_count = $('.variants-container.form-group > .form-group').length
								return (variant_count > 0 || code !== '')
							}
						}
					}
				},
				'variant[][name]': {
					row: '.col-xs-12',
					validators: {
						notEmpty: {
							message: 'The variant name is required'
						}
					}
				},
				'variant[][price_cents]': {
					row: '.col-xs-12',
					validators: {
						notEmpty: {
							message: 'The variant price is required'
						}
					}
				}
			}
		})
		.on('click', '#add-variant-button', function() {
	
			var $template = $('#variantTemplate');
			$clone = $template.clone().removeClass('hide').removeAttr('id');
      $('.variants-container').append($clone);
      $option_name   = $clone.find('[name="variant[][name]"]');
      $option_price_cents   = $clone.find('[name="variant[][price_cents]"]');

      // Add new field
      $('form').formValidation('addField', $option_name);
      $('form').formValidation('addField', $option_price_cents);

      $('form').find('[name="product[price_cents]"]').prop('disabled', true);
			
		})
		.on('click', '.removeButton', function() {
			var $row    = $(this).closest('.form-group');
      $option_name   = $row.find('[name="variant[][name]"]');
      $option_price_cents   = $row.find('[name="variant[][price_cents]"]');

      
      // Remove field
      $('form').formValidation('removeField', $option_name);
      $('form').formValidation('removeField', $option_price_cents);

      // Remove element containing the option
      $row.remove();

      var count_variants = $('form .variants-container > .form-group').length - 1;
      if(count_variants == 0) {
      	$('form').find('[name="product[price_cents]"]').prop('disabled', false);
      }

		})

	 

		showRefundableFields();

		$('body').loading('stop');

	});

});

$(function() {
	function displayResult(item) {
		$('.alert').show().html('You selected <strong>' + item.value + '</strong>: <strong>' + item.text + '</strong>');
	}
	$('#demo6').typeahead({
		source: [
			'Genting',
			'Zoo Negara',
			'Tioman',
			'Petronas Towers',
			'Batu Caves',
			'Gunung Mulu',
			'Mount Kinabalu',
			'Bako Park',
			'Sunway Lagoon',
			'Pangkor island'
		],
		onSelect: displayResult
	});

});

// This example displays an address form, using the autocomplete feature
// of the Google Places API to help users fill in the information.

var placeSearch, autocomplete;
var componentForm = {
  street_number: 'short_name',
  route: 'long_name',
  locality: 'long_name',
  administrative_area_level_1: 'short_name',
  // country: 'long_name',
  postal_code: 'short_name'
};

function initAutocomplete() {
  // Create the autocomplete object, restricting the search to geographical
  // location types.
  autocomplete = new google.maps.places.Autocomplete(
      /** @type {!HTMLInputElement} */(document.getElementById('route')),
      {types: ['geocode']});

  // When the user selects an address from the dropdown, populate the address
  // fields in the form.
  autocomplete.addListener('place_changed', fillInAddress);
}

// [START region_fillform]
function fillInAddress() {
  // // Get the place details from the autocomplete object.
  var place = autocomplete.getPlace();
  console.log(place.address_components);

  for (var component in componentForm) {
    document.getElementById(component).value = '';
    document.getElementById(component).disabled = false;
  }

  // // Get each component of the address from the place details
  // // and fill the corresponding field on the form.

  for (var i = 0; i < place.address_components.length; i++) {
    var addressType = place.address_components[i].types[0];
    if (componentForm[addressType]) {
      var val = place.address_components[i][componentForm[addressType]];
      document.getElementById(addressType).value = val;
    }
  }

  $('form').formValidation('revalidateField', 'product[city]');
	$('form').formValidation('revalidateField', 'product[state]');
}
// [END region_fillform]

// [START region_geolocation]
// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      var geolocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      };
      var circle = new google.maps.Circle({
        center: geolocation,
        radius: position.coords.accuracy
      });
      autocomplete.setBounds(circle.getBounds());
    });
  }
}
// [END region_geolocation]
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCK70SDLsZG5fYn8kLfMj1I7Dy2zXoq6Qk&signed_in=true&libraries=places&callback=initAutocomplete" async defer>
	
</script>

<style type="text/css">
	input[type=file] {
		display: none;
	}
	.section-details .btn.delete-attachment {
		position: absolute;
    top: 0;
    right: 15px;
    height: inherit;
    padding: 2px 10px;
    border-radius: 0;
    opacity: 0.8;
    background-color: #ccc;
	}
	.attachments-container .form-group.col-md-4 {
		position: relative;
	}

	.attachments-container img {
		width: 100%
	}

	.form-control {
		border: 1px solid #ccc;
	}
	.amount-inner .input-group {
		display: table-row;
		line-height: 44px;
	}
	.amount-inner span.input-group-addon.currency-value {
		font-size: 1.8rem;
    padding: 1rem;
    background: none repeat scroll 0 0 #f1f2f2;
    display: table-cell;
	}
	.amount-inner .input-group input {
		margin: 0;
    display: table-cell;
	}

	input[type=checkbox]:focus, .checkbox input[type="checkbox"]:focus + label:before {
		-webkit-appearance: checkbox !important;	
	}
	input[type=checkbox]:hover {
		-webkit-appearance: checkbox !important;	
	}
	.radio input[type="radio"] {
		opacity: 1;
	}
	input[type=radio]:focus, .radio input[type="radio"]:focus + label:before {
		-webkit-appearance: radio !important;	
	}
	input[type=radio]:hover {
		-webkit-appearance: radio !important;	
	}
	.radio label::before {
		border: none;
	}

	.variants-container .form-group.row .col-xs-4 {
		padding-top: 25px;
	}
	.fv-form-bootstrap .fv-icon-no-label {
		z-index: 10;
		right: 10px;
	}
	.has-feedback label ~ .form-control-feedback {
		right: 10px;
	}
</style>